(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{371:function(t,e,r){"use strict";r.r(e);var a=r(25),n=Object(a.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"코루틴"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#코루틴"}},[t._v("#")]),t._v(" 코루틴")]),t._v(" "),r("h2",{attrs:{id:"코루틴은-제너레이터에서-어떻게-진화했는가"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#코루틴은-제너레이터에서-어떻게-진화했는가"}},[t._v("#")]),t._v(" 코루틴은 제너레이터에서 어떻게 진화했는가?")]),t._v(" "),r("p",[t._v('코루틴은 2.5버전(2006년)에 구현된 "'),r("a",{attrs:{href:"https://www.python.org/dev/peps/pep-0342/",target:"_blank",rel:"noopener noreferrer"}},[t._v("PEP 342 - 향상된 제너레이터를 통한 코루틴"),r("OutboundLink")],1),t._v('"에 설명되어 있다. 이때부터 yield를 쓸 수 있었고, send() 메서드를 이용하여 제너레이터 내부에 값을 보낼 수 있게 되었다.')]),t._v(" "),r("p",[t._v('최근 3.3(2012년)에서 구현된 "'),r("a",{attrs:{href:"https://python.org/dev/peps/pep-0380/",target:"_blank",rel:"noopener noreferrer"}},[t._v("PEP 380 - 하위 제너레이터에 위임하기 위한 구문"),r("OutboundLink")],1),t._v('"에서는 다음과 같은 2가지 유용한 기능이 추가 되었다.')]),t._v(" "),r("ul",[r("li",[t._v("제너레이터가 값을 리턴할 수 있다. 이전에는 "),r("code",[t._v("return")]),t._v("를 하는 경우 "),r("code",[t._v("SyntaxError")]),t._v("가 발생하였다.")]),t._v(" "),r("li",[t._v("기존 제너레이터가 하위 제너레이터에 위임하기 위해 필요한 코드를 간략하게 "),r("code",[t._v("yield from")]),t._v(" 구문을 이용하여 구현할 수 있다.")])]),t._v(" "),r("h2",{attrs:{id:"코루틴으로-사용되는-제너레이터의-기본-동작"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#코루틴으로-사용되는-제너레이터의-기본-동작"}},[t._v("#")]),t._v(" 코루틴으로 사용되는 제너레이터의 기본 동작")]),t._v(" "),r("p",[t._v("코루틴은 다음과 같은 4가지 상태 중 하나를 갖는다. "),r("code",[t._v("inspect.getgeneratorstate()")]),t._v(" 함수를 이용해서 확인할 수 있다.")]),t._v(" "),r("ul",[r("li",[t._v("GEN_CREATED: 실행을 위해 대기하는 상태")]),t._v(" "),r("li",[t._v("GEN_RUNNING: 인터프리터가 실행하고 있는 상태. 다중스레드 어플리케이션에서만 볼 수 있다.")]),t._v(" "),r("li",[t._v("GEN_SUSPENDED: "),r("code",[t._v("yield")]),t._v("문에서 대기하고 있는 상태")]),t._v(" "),r("li",[t._v("GEN_CLOSED: 실행이 완료된 상태")])]),t._v(" "),r("h2",{attrs:{id:"이동-평균을-계산하는-코루틴"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#이동-평균을-계산하는-코루틴"}},[t._v("#")]),t._v(" 이동 평균을 계산하는 코루틴")]),t._v(" "),r("p",[t._v("생각하는 바와 같이 쉽게 작성할 수 있는데, 다만 기동하기 위한 절차로 최초로 "),r("code",[t._v("next()")]),t._v(" 메서드를 호출해줘야 한다. 그래야만 코루틴이 yield 이전까지 코드를 실행하고, 이후 부터는 동일한 루틴을 반복할 수 있다.")]),t._v(" "),r("h2",{attrs:{id:"코루틴을-기동하기-위한-데커레이터"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#코루틴을-기동하기-위한-데커레이터"}},[t._v("#")]),t._v(" 코루틴을 기동하기 위한 데커레이터")]),t._v(" "),r("div",{staticClass:"language-python extra-class"},[r("pre",{pre:!0,attrs:{class:"language-python"}},[r("code",[r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" functools "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" wraps\n\n"),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("coroutine")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("func"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),r("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[t._v("@wraps")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("func"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("primer")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("args"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),t._v("kwargs"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        gen "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" func"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("args"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),t._v("kwargs"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),r("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("gen"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" gen\n    "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" primer\n")])])]),r("p",[r("code",[t._v("@coroutine")]),t._v(" 데커레이터로 꾸미면, 해당 코루틴을 생성과 동시에 "),r("code",[t._v("yield")]),t._v("문까지 실행된다.")]),t._v(" "),r("p",[r("code",[t._v("yield from")]),t._v(" 구문은 자동으로 코루틴을 기동하므로, 여기서 설명한 "),r("code",[t._v("@coroutine")]),t._v(" 데커레이터와 동시에 쓸 수 없다. "),r("code",[t._v("@asyncio.coroutine")]),t._v(" 데커레이터는 동시에 쓸 수 있도록 설계되었으므로, 자동으로 코루틴을 기동하지 않는다.")]),t._v(" "),r("h2",{attrs:{id:"코루틴의-종료와-예외처리"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#코루틴의-종료와-예외처리"}},[t._v("#")]),t._v(" 코루틴의 종료와 예외처리")]),t._v(" "),r("p",[r("code",[t._v("throw()")]),t._v("와 "),r("code",[t._v("close()")]),t._v(" 메서드가 있다. "),r("code",[t._v("throw()")]),t._v("는 외부에서 제너레이터 안으로 예외를 전달하게 되는데, 내부적으로 처리하면 아무 문제 없이 다음 "),r("code",[t._v("yield")]),t._v("까지 수행되나, 처리되지 않는 경우, 호출자에게 예외가 전파된다. "),r("code",[t._v("close()")]),t._v("는 제너레이터가 "),r("code",[t._v("GeneratorExit")]),t._v("예외를 발생시키도록 만든다. 예외를 처리하지 않거나, "),r("code",[t._v("StopIteration")]),t._v(" 예외를 발생시키면 호출자에게 에러가 전달되지 않는다. 만약 다른 값을 생성하여 전달하게 되면 "),r("code",[t._v("RuntimeError")]),t._v(" 예외가 발생한다.")]),t._v(" "),r("div",{staticClass:"language-python extra-class"},[r("pre",{pre:!0,attrs:{class:"language-python"}},[r("code",[r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("demo_finally")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"- coroutine stated"')]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                x "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("yield")]),t._v("\n            "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("except")]),t._v(" DemoException"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"DemoException handled. Continuing..."')]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-> coroutine received: {}"')]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("format")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("finally")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"- corouine ended."')]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),r("p",[t._v("코루틴이 종료될 때 정리용 코드를 넣기 위해서 위와 같은 형태의 코드를 작성하게 되는데, 이러한 형태는 매번 작성하기 번거롭다. "),r("code",[t._v("yield from")]),t._v("는 이와 같은 문제를 해결하기 위해 소개되었다.")]),t._v(" "),r("h2",{attrs:{id:"코루틴에서-값-반환하기"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#코루틴에서-값-반환하기"}},[t._v("#")]),t._v(" 코루틴에서 값 반환하기")]),t._v(" "),r("p",[t._v("앞서 이동평균을 구하는 제너레이터에서 "),r("code",[t._v("send()")]),t._v(" 메서드에 "),r("code",[t._v("None")]),t._v("를 넘겨주면, 반복문에서 빠져나와 값을 리턴하도록 예제를 작성하였다. 이를 사용자가 올바르게 이용하기 위해서는 "),r("code",[t._v("try - except")]),t._v("를 이용하여, "),r("code",[t._v("StopIteration")]),t._v(" 예외를 잡을 후, "),r("code",[t._v("except")]),t._v(" 문장에서 결과를 받아야 한다. "),r("code",[t._v("yield from")]),t._v("은 내부적으로 "),r("code",[t._v("StopIteration")]),t._v(" 예외를 처리하므로, 코루틴의 반환값을 가져오는 우회적인 방법으로 사용할 수 있다. 이는 "),r("code",[t._v("for")]),t._v("문에서 처리하는 방식과 비슷하게 받아들일 수 있다. 하지만 인터프리터에서는 "),r("code",[t._v("yield from")]),t._v("를 쓸 수가 없다. 함수 외수에서 yield를 사용하면 구문 에러가 발생하기 때문이다.")]),t._v(" "),r("h2",{attrs:{id:"yield-from-사용하기"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#yield-from-사용하기"}},[t._v("#")]),t._v(" "),r("code",[t._v("yield from")]),t._v(" 사용하기")]),t._v(" "),r("p",[r("code",[t._v("yield from")]),t._v("은 구문 생김새와 다르게 완전히 새로운 언어 구성체임을 명심하자. 다른 언어에서는 비슷한 기능을 하는 키워드를 "),r("code",[t._v("await")]),t._v("라고 쓰기도 한다.")]),t._v(" "),r("p",[r("code",[t._v("gen()")]),t._v("이 "),r("code",[t._v("yield from subgen()")]),t._v("를 호출하고, "),r("code",[t._v("subgen()")]),t._v("이 값을 생성하여 리턴하면, "),r("code",[t._v("gen()")]),t._v("의 호출자에게 반환된다. 실제로 "),r("code",[t._v("subgen()")]),t._v("이 직접 호출자를 이끄는 효과가 있고, "),r("code",[t._v("subgen()")]),t._v("이 수행되는 동안 "),r("code",[t._v("gen()")]),t._v("은 실행을 중단한다.")]),t._v(" "),r("p",[t._v('약간 복잡하지만 유용한 예로 데이비드 비즐리, 브라이언 K. 존슨의 <파이썬 쿡북 3판> 4.14절 "'),r("a",{attrs:{href:"http://bit.ly/1MMe1sc",target:"_blank",rel:"noopener noreferrer"}},[t._v("중첩 시퀀스를 단일 시퀀스로 변환하기"),r("OutboundLink")],1),t._v('"가 있다.')]),t._v(" "),r("p",[t._v("단순히 "),r("code",[t._v("for")]),t._v(" 루프를 대체하기 위해 "),r("code",[t._v("yield from")]),t._v('이 제안되지는 않았다. 제안된 PEP 380의 제목이 "하위 제너레이터에 위임하기 위한 구문"이다.')]),t._v(" "),r("p",[r("code",[t._v("yield from")]),t._v("에서 하위 제너레이터를 끝내지 않으면, 호출한 상위 제너레이터가 "),r("code",[t._v("yield from")]),t._v(" 구문에 머물러 있게 된다. 하지만 메인 플로우는 이미 하위 제너레이터를 받아서 실행이 되고 있기 때문에, 전체 흐름은 진행될 수 있다. 다만 프로그램이 종료되어도 일부 코드가 마무리되지 않은 채 머물러 있을 수 있다. 이 부분을 주의해야 한다.")]),t._v(" "),r("h2",{attrs:{id:"yield-from의-의미"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#yield-from의-의미"}},[t._v("#")]),t._v(" "),r("code",[t._v("yield from")]),t._v("의 의미")]),t._v(" "),r("p",[t._v("동일한 의사코드로 확인하는 작업을 설명하고 있으나, 일단 넘어가자.")]),t._v(" "),r("h2",{attrs:{id:"사용례-이산-이벤트-시뮬레이션을-위한-코루틴"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#사용례-이산-이벤트-시뮬레이션을-위한-코루틴"}},[t._v("#")]),t._v(" 사용례: 이산 이벤트 시뮬레이션을 위한 코루틴")]),t._v(" "),r("blockquote",[r("p",[t._v("코루틴은 시뮬레이션, 게임, 비동기 입출력, 그 외 이벤트 주도 프로그래밍이나 협업적 멀티태스킹 등의 알고리즘을 자연스럽게 표현한다. - 귀도 반 로섬, 필립 J. 이바이 (PEP 342)")])]),t._v(" "),r("p",[t._v("이산 이벤트 시뮬레이션(Discrete Event Simulation, DES)는 이벤트를 기준으로 시뮬레이션을 실행한다. 턴제 게임과 유사하며 실시간 게임은 연속 시뮬레이션으로 서로 대응되는 개념으로 이해할 수 있다.")]),t._v(" "),r("p",[t._v("코루틴은 DES를 작성하기 위한 방법에 적합하고, SimPy는 하나의 코루틴을 사용하는 파이썬용 DES 패키지이다.")]),t._v(" "),r("p",[t._v("택시 운행을 예제로 삼았는데, 택시 한대가 운행하는 기록을 모의하는 코루틴 함수가 있고, 이 함수가 여러개(여러대의 택시)를 동시에 운행하는 상황을 모의하는 예제이다. 핵심은 "),r("code",[t._v("PriorityQueue")]),t._v("를 통해서 시간 순서대로 재정렬한다는 것이다. 재정렬 후, queue에서 이벤트를 꺼내서 실행한다. 이벤트를 실행하고, 코루틴이 끝나면, 해당 프로세스는 끝나는 것이고, 아니면, 후속 이벤트를 다시 큐에 넣고 이를 반복한다.")]),t._v(" "),r("h2",{attrs:{id:"요약"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#요약"}},[t._v("#")]),t._v(" 요약")]),t._v(" "),r("p",[t._v("귀도 반 로섬은 제너레이터를 사용하는 방법은 세가지 스타일이 있다고 했다.")]),t._v(" "),r("blockquote",[r("p",[t._v("'풀' 스타일(반복자), '푸시' 스타일(이동 평균 예제), '작업'이 있다. "),r("a",{attrs:{href:"http://www.dabeaz.com/coroutines",target:"_blank",rel:"noopener noreferrer"}},[t._v("데이비드 비즐리의 코루틴 튜토리얼"),r("OutboundLink")],1),t._v("를 읽어보세요.")])]),t._v(" "),r("p",[t._v("시뮬레이션 예제에서 택시 프로세서가 '작업' 스타일이다.")]),t._v(" "),r("p",[t._v("코루틴을 자동으로 기동해주는 데커레이터를 이용하면 코루틴을 편리하게 사용할 수 있다. 다만 "),r("code",[t._v("yield from subgen()")]),t._v("은 하위 제너레이터를 자동으로 기동해주므로 호환되지 않는다. 주의해야 한다.")]),t._v(" "),r("p",[t._v("누산기 코루틴에서는 send() 메서드를 통해서 중간 결과를 생성할 수 있었는데, 이것보다 값을 반환할 수 있을 때 훨씬 유용하다. "),r("code",[t._v("yield from")]),t._v(" 구문이 코루틴의 결과를 자동으로 처리해 준다.")]),t._v(" "),r("p",[t._v("택시 시뮬레이션 예제에서는 클라이언트에서 제너레이터를 통해 하위 제너레이터를 받아서 이용할 수 있는데, 이는 코루틴이 반복적으로 핵심 루프에 제어권을 넘겨주므로, 멀티태스킹 환경에서 중앙 스케쥴러에게 제어권을 넘겨주는 것과 유사하다.")]),t._v(" "),r("p",[t._v("이번 장에서는 "),r("code",[t._v("send()")]),t._v(" 메서드를 호출하여 값을 전달하였으나, asyncio 코루틴은 코루틴을 엄격하게 정의한다. "),r("code",[t._v("@asyncio.coroutine")]),t._v(" 데커레이터가 붙으면, "),r("code",[t._v("send()")]),t._v("는 직접 호출할 수 없고, 언제나 "),r("code",[t._v("yield from")]),t._v("으로 호출된다.")]),t._v(" "),r("h2",{attrs:{id:"읽을거리"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#읽을거리"}},[t._v("#")]),t._v(" 읽을거리")]),t._v(" "),r("p",[t._v("데이비드 비즐리는 코루틴의 절대적인 권이자이다. 파이썬 쿡북에서 코루틴에 대한 많은 비법을 다루고 있다. PyCon US 2008에서 처음 "),r("a",{attrs:{href:"http://www.dabeaz.com/generators/",target:"_blank",rel:"noopener noreferrer"}},[t._v("'시스템 프로그래머를 위한 제너레이터 기법'"),r("OutboundLink")],1),t._v("을 발표했다. 코루틴에 관한 강의는 "),r("a",{attrs:{href:"http://www.dabeaz.com/coroutines",target:"_blank",rel:"noopener noreferrer"}},[t._v("'코루틴 및 동시성에 대한 흥미로운 강의'"),r("OutboundLink")],1),t._v("에 있다. PyCon 2014dptj "),r("a",{attrs:{href:"http://www.dabeaz.com/finalgenerator/",target:"_blank",rel:"noopener noreferrer"}},[t._v("'제너레이터: 최후의 선구자'"),r("OutboundLink")],1),t._v("을 통해 동시성에 대한 많을 예제를 다루었다.")]),t._v(" "),r("p",[t._v("코루틴을 사용하면, 코드를 새로운 방식으로 구조화할 수 있지만, 재귀적 호출이나 다형성 같은 가능성을 최대한 활용하는 데에는 시간이 걸린다. 제임스 파웰은 "),r("a",{attrs:{href:"http://bit.ly/1HGsFQ0",target:"_blank",rel:"noopener noreferrer"}},[t._v("'코루틴을 위한 탐욕스러운 알고리즘'"),r("OutboundLink")],1),t._v("을 통해 고전적인 알고리즘을 재작성하였다. 그리고 ActiveState 코드 비법 데이터베이스에서 "),r("a",{attrs:{href:"http://bit.ly/1HGsFzA",target:"_blank",rel:"noopener noreferrer"}},[t._v("코루틴으로 태깅된 예제"),r("OutboundLink")],1),t._v("를 살펴보는 것도 좋다.")]),t._v(" "),r("p",[t._v("폴 소콜로브스키는 "),r("a",{attrs:{href:"http://micropython.org",target:"_blank",rel:"noopener noreferrer"}},[t._v("초경량 마이크로파이썬"),r("OutboundLink")],1),t._v("에서 yield from을 구현했다. "),r("a",{attrs:{href:"http://flupy.org/resources/yield-from.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("관련 pdf"),r("OutboundLink")],1),t._v("를 공개하였다.")]),t._v(" "),r("p",[t._v("대부분의 예제가 asyncio에 연결되기 때문에, asyncio에 의존하지 않는 코드는 그렉 이윙이 게시한 "),r("a",{attrs:{href:"http://bit.ly/1JIqJtu",target:"_blank",rel:"noopener noreferrer"}},[t._v("이진트리, 간단한 XML 파서, 작업 스케줄러 예제"),r("OutboundLink")],1),t._v("에서 찾아볼 수 있다.")]),t._v(" "),r("p",[t._v("브랫 슬랫킨은 <이펙티브 파이썬>에서 '여러 함수를 동시에 실행시키는 방법으로서의 코루틴'을 설명하면서, "),r("a",{attrs:{href:"http://bit.ly/1JIqNcZ",target:"_blank",rel:"noopener noreferrer"}},[t._v("예제코드"),r("OutboundLink")],1),t._v("를 공개하였다. 브랫 슬랫킷의 책예제는 "),r("a",{attrs:{href:"http://github.com/bslatkin/effectivepython",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://github.com/bslatkin/effectivepython"),r("OutboundLink")],1),t._v("에서 볼 수 있고, 콘웨이의 라이프 게임을 구현하고 리팩토링한 코드는 "),r("a",{attrs:{href:"http://bit.ly/coro_life",target:"_blank",rel:"noopener noreferrer"}},[t._v("깃허브 gist"),r("OutboundLink")],1),t._v("에서 확인할 수 있다.")]),t._v(" "),r("p",[t._v("그 외에 다음 링크를 참조할만 하다.")]),t._v(" "),r("ul",[r("li",[t._v("피터 오텐의 "),r("a",{attrs:{href:"http://bit.ly/1JIqSxf",target:"_blank",rel:"noopener noreferrer"}},[t._v("'파이썬을 이용해서 두 개의 csv 파일 비교하기'"),r("OutboundLink")],1)]),t._v(" "),r("li",[t._v("이안 워드의 "),r("a",{attrs:{href:"http://bit.ly/1JIqQ8x",target:"_blank",rel:"noopener noreferrer"}},[t._v("iPython을 이용한 '반복형, 반복자, 제너레이터' 튜토리얼"),r("OutboundLink")],1)]),t._v(" "),r("li",[t._v("귀도 반 로섬의 "),r("a",{attrs:{href:"http://bit.ly/1JIqT44",target:"_blank",rel:"noopener noreferrer"}},[t._v("yield와 yield from의 차이"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"http://bit.ly/1JIqXB1",target:"_blank",rel:"noopener noreferrer"}},[t._v("이산 이벤트 시뮬레이션"),r("OutboundLink")],1),t._v("은 협업적 멀티태스킹에 익숙해지기 좋은 예제")]),t._v(" "),r("li",[t._v("아시시 굽타의 "),r("a",{attrs:{href:"http://bit.ly/1JIqWgz",target:"_blank",rel:"noopener noreferrer"}},[t._v("이산 이벤트 시뮬레이션 구현: 열 개의 교훈"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://simpy.readthedocs.org/en/latest/",target:"_blank",rel:"noopener noreferrer"}},[t._v("SimPy"),r("OutboundLink")],1),t._v("는 표준 파이썬으로 구현한 프로세스 기반 이산 이벤트 시뮬레이션 프레임워크")])]),t._v(" "),r("p",[t._v("파이썬은 키워드 갯수가 많지 않은데, 일부 키워드는 그 의미가 모호하다. 예를 들어, "),r("code",[t._v("for")]),t._v(", "),r("code",[t._v("while")]),t._v(", "),r("code",[t._v("try")]),t._v(" 경우에는 "),r("code",[t._v("else")]),t._v("가 "),r("code",[t._v("then")]),t._v("으로 적히는 편이 이해하기 쉽다. "),r("code",[t._v("def")]),t._v("는 함수, 제너레이터, 코루틴을 정의하기 위해 사용되므로 너무 광범위하게 이용된다. "),r("code",[t._v("yield from")]),t._v("도 문제이나, 3.5 버전에서는 "),r("code",[t._v("await")]),t._v(" 키워드가 추가 될 것이라고 한다.")])])}),[],!1,null,null,null);e.default=n.exports}}]);