(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{400:function(t,a,s){"use strict";s.r(a);var e=s(25),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"파이썬-속성-강좌"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#파이썬-속성-강좌"}},[t._v("#")]),t._v(" 파이썬 속성 강좌")]),t._v(" "),s("p",[t._v("초심자가 처음보고 이해하기엔 무리가 있겠지만, 단시간(1시간이내)에 파이썬을 실용적인 수준까지 쓸 수 있도록 안내하고 있다.")]),t._v(" "),s("h2",{attrs:{id:"기본기"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#기본기"}},[t._v("#")]),t._v(" 기본기")]),t._v(" "),s("h3",{attrs:{id:"설치하기"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#설치하기"}},[t._v("#")]),t._v(" 설치하기")]),t._v(" "),s("p",[t._v("아나콘다 배포판을 이용하자.")]),t._v(" "),s("h3",{attrs:{id:"the-zen-of-python"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#the-zen-of-python"}},[t._v("#")]),t._v(" The zen of python")]),t._v(" "),s("p",[t._v("파이썬의 교리 같은 것인데, "),s("code",[t._v("import this")]),t._v("를 하면 볼 수 있다. 기본적으로 단순하게, 그리고 작동하는 데 집중하길 권하고 있다. 헬로월드 예제를 자바랑 비교해보면 명확하다. 자바는 OOP를 위해서 필요한 형식을 다 갖추다보니, 헬로월드가 5줄은 된다. 거기다가 사용해야 하는 키워드도 굉장히 많다. 하지만 파이썬은 그저 "),s("code",[t._v('print("hello, world")')]),t._v("가 전부이다.")]),t._v(" "),s("h3",{attrs:{id:"들여쓰기"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#들여쓰기"}},[t._v("#")]),t._v(" 들여쓰기")]),t._v(" "),s("p",[t._v("파이썬은 여느 언어와 달리 대괄호로 블록을 구분하지 않고, 들여쓰기로 블록을 구분한다. 그리고 들여쓰기 과정에서 탭과 스페이스를 혼용하면 안되는데, 초심자 입장에서는 이점이 어렵게 느껴질 수 있다. 반면 포맷이 일정부분 강제되기 때문에 가독성이 좋아진다는 장점이 있다. 줄바꿈을 하고 싶으면, 괄호를 열어서 나열하거나, 역슬래시를 써서 해당 줄의 입력이 끝나지 않았음을 인터프리터에게 알릴 수 있다. 또한 중간에 빈 줄이 들어갈 경우, 오작동할 수 있으므로 초심자는 조심하자.")]),t._v(" "),s("h3",{attrs:{id:"모듈"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#모듈"}},[t._v("#")]),t._v(" 모듈")]),t._v(" "),s("p",[t._v("라이브러리, 패키지, 외부함수 등등 초심자나 다른 언어를 이용하는 사람들이 다양하게 부르는 용어일텐데, 파이썬에서는 모듈이라고 한다. 모듈을 가져오는 방식은 몇가지가 있는데, 형태에 익숙하면 된다. 파이썬은 기본적으로 영어로 읽을 때 편하게 코드가 읽히도록 설계되었음을 염두해서 기억하면 도움이 된다.")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" re\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" re "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" regex\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" matplotlib"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pyplot "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" plt\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" collections "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" defaultdict"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Counter\n")])])]),s("h3",{attrs:{id:"연산"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#연산"}},[t._v("#")]),t._v(" 연산")]),t._v(" "),s("p",[t._v("프로그래밍 언어는 자료형에 따라 연산이 다소 다를 수 있다. 대표적인 것이 나눗셈일텐데, "),s("code",[t._v("5/2")]),t._v("는 정수형이기 때문에 "),s("code",[t._v("2")]),t._v("가 된다. 실수형으로 계산하면 일반적으로 원하는 결과를 얻을 수 있고, 몫을 구하고 싶으면 "),s("code",[t._v("5//2")]),t._v("로 계산할 수 있다. 나머지는 "),s("code",[t._v("5%2")]),t._v("이다.")]),t._v(" "),s("h3",{attrs:{id:"함수"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#함수"}},[t._v("#")]),t._v(" 함수")]),t._v(" "),s("p",[t._v("파이썬의 함수는 일급 함수의 특징을 갖는데, 함수 자체도 변수로 넘겨줄 수 있다.")]),t._v(" "),s("p",[t._v("람다 함수는 다소 생소한데, 이름없는 함수 정도로 이해하고, 형식에 그저 익숙해지면 된다.")]),t._v(" "),s("h3",{attrs:{id:"문자열"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#문자열"}},[t._v("#")]),t._v(" 문자열")]),t._v(" "),s("p",[t._v("유니코드(한글)를 쓴다면, 무조건 python3를 쓰길 강력 권한다. 간혹 2.7 혹은 2.x 버전을 쓰는 경우가 있는데, 문자열 처리가 쉽지 않다. 파이썬 3에서 무조건 utf-8로 코드를 작성하면 별다른 문제가 없다.")]),t._v(" "),s("h3",{attrs:{id:"예외-처리"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#예외-처리"}},[t._v("#")]),t._v(" 예외 처리")]),t._v(" "),s("p",[t._v("여타 언어처럼 예외 처리가 있다. "),s("code",[t._v("try")]),t._v(", "),s("code",[t._v("expect")]),t._v(" 키워드를 이용한다.")]),t._v(" "),s("h3",{attrs:{id:"list"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#list"}},[t._v("#")]),t._v(" list")]),t._v(" "),s("p",[t._v("파이썬을 처음 쓸 때 매력적으로 느껴졌던 게 바로 리스트이다. C언어에서 힘들게 쓰던 배열을 아주 쉽게 list를 이용하여 구현된다. 가장 기본적인 자료형이며, 인덱스 사용법 정도는 익혀두자.")]),t._v(" "),s("p",[t._v("리스트에 항목이 존재하는 지 평가하기 위한 "),s("code",[t._v("in")]),t._v(" 키워드, 리스트 2개를 합칠 때는 "),s("code",[t._v("my_list.extend()")]),t._v(" 메서드, 항목을 하나씩 추가할 때는 "),s("code",[t._v("my_list.append()")]),t._v(" 메서드를 이용하면 된다.")]),t._v(" "),s("p",[t._v("그리고 파이썬에서는 언팩이 지원되므로, 두 변수를 서로 바꾸는 swap 기능을 한줄로 표현할 수 있다.")]),t._v(" "),s("h3",{attrs:{id:"tuple"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tuple"}},[t._v("#")]),t._v(" tuple")]),t._v(" "),s("p",[t._v("리스트와 유사하나 불변형 자료형이다.")]),t._v(" "),s("h3",{attrs:{id:"dict"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dict"}},[t._v("#")]),t._v(" dict")]),t._v(" "),s("p",[t._v("사전형 자료형으로 자주 이용된다. 키가 없을 때는 에러가 발생하므로, 예외처리 혹은 defaultdict 같은 자료형을 이용하여 구현하도록 한다.")]),t._v(" "),s("h3",{attrs:{id:"defaultdict"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#defaultdict"}},[t._v("#")]),t._v(" defaultdict")]),t._v(" "),s("p",[t._v("사전형을 이용하는 케이스 중, 자료을 단순히 채워가는 경우가 있는데, 이 경우 키의 존재 여부를 매번 평가하도록 코드를 작성하는 것이 번거로울 수 있다. 이 때, defaultdict를 이용하면, 값이 없으면, default 값을 제공함으로써, 예외처리나 비교구문 없이 구현이 가능하다.")]),t._v(" "),s("p",[t._v("비슷한 기능을 수행하는 클래스로 "),s("code",[t._v("Counter")]),t._v("가 있다.")]),t._v(" "),s("h3",{attrs:{id:"set"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#set"}},[t._v("#")]),t._v(" set")]),t._v(" "),s("p",[t._v("수학의 집합 개념인 "),s("code",[t._v("set")]),t._v("은 순서가 상관없고, 중복을 허용하지 않고, 존재 여부가 중요할 때 이용할 수 있다.")]),t._v(" "),s("h3",{attrs:{id:"흐름-제어"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#흐름-제어"}},[t._v("#")]),t._v(" 흐름 제어")]),t._v(" "),s("p",[t._v("대부분의 언어와 유사한 흐름 제어 구문을 가지고 있으며, "),s("code",[t._v("while")]),t._v("보다는 "),s("code",[t._v("for")]),t._v("구문을 훨씬 많이 쓴다.")]),t._v(" "),s("h3",{attrs:{id:"true-false"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#true-false"}},[t._v("#")]),t._v(" True/False")]),t._v(" "),s("p",[t._v("파이썬은 참과 거짓을 나타내는 자료형의 값으로 "),s("code",[t._v("True")]),t._v("와 "),s("code",[t._v("False")]),t._v("를 쓴다. 기본 룰을 C와 유사한데, 코드를 작성할 때 암시적 룰에 기대하기 보다는 명시적으로 작성해주는 것이 좋다.")]),t._v(" "),s("h2",{attrs:{id:"한걸음-나아가기"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#한걸음-나아가기"}},[t._v("#")]),t._v(" 한걸음 나아가기")]),t._v(" "),s("h3",{attrs:{id:"정렬"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#정렬"}},[t._v("#")]),t._v(" 정렬")]),t._v(" "),s("p",[s("code",[t._v("sorted()")]),t._v(" 함수 혹은 "),s("code",[t._v("list_a.sort()")]),t._v("와 같이 쓸 수 있다. 전자는 새로운 객체를 돌려주지만, 후자는 객체 내용을 바꾼다.")]),t._v(" "),s("h3",{attrs:{id:"list-comprehension"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#list-comprehension"}},[t._v("#")]),t._v(" List Comprehension")]),t._v(" "),s("p",[t._v("리스트 형태의 자료를 만드는 구문으로 굉장히 유용하다. 꼭 익혀두길 바란다. 다음과 같은 예제를 보면 좀 더 쉽게 이해가 될 것 같다.")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("x "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("h3",{attrs:{id:"generator와-iterator"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#generator와-iterator"}},[t._v("#")]),t._v(" Generator와 iterator")]),t._v(" "),s("p",[t._v("제너레이터는 함수를 한꺼번에 실행해서 결과를 전부 주는 것이 아니라, 필요할 때 하나씩 돌려주는 방식을 구체화한 기능이다. "),s("code",[t._v("yield")]),t._v(" 키워드를 이용하는데, 자세한 건 다른 교재를 좀 더 참조하자.")]),t._v(" "),s("h3",{attrs:{id:"난수-생성"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#난수-생성"}},[t._v("#")]),t._v(" 난수 생성")]),t._v(" "),s("p",[s("code",[t._v("rand()")]),t._v(" 함수를 이용할 수 있다. 시드를 지정하면, 동일한 난수를 생성할 수 있다.")]),t._v(" "),s("h3",{attrs:{id:"정규표현식"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#정규표현식"}},[t._v("#")]),t._v(" 정규표현식")]),t._v(" "),s("p",[t._v("문자열 처리에 정규표현식이 모든 해법을 제시해 준다. 반드시 쓸 필요는 없지만, 다소 복잡한 패턴을 문자열에서 찾아야 한다면, 정규표현식이 가장 근사한 해법이다.")]),t._v(" "),s("h3",{attrs:{id:"객체-지향-프로그래밍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#객체-지향-프로그래밍"}},[t._v("#")]),t._v(" 객체 지향 프로그래밍")]),t._v(" "),s("p",[t._v("파이썬도 객체지향프로그래밍을 지원한다. "),s("code",[t._v("class")]),t._v("가 있다는 말인데, 여타 언어와는 다소 다른 구문을 가지고 있으니, 시간을 두고 살펴보자.")]),t._v(" "),s("h3",{attrs:{id:"함수형-도구"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#함수형-도구"}},[t._v("#")]),t._v(" 함수형 도구")]),t._v(" "),s("p",[t._v("함수의 고정된 인자를 추출해서 줄여주는 "),s("code",[t._v("partial")]),t._v("이라던지, "),s("code",[t._v("map")]),t._v(", "),s("code",[t._v("reduce")]),t._v("같은 함수를 도와주는 함수가 있다.")]),t._v(" "),s("h3",{attrs:{id:"enumerate"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#enumerate"}},[t._v("#")]),t._v(" enumerate")]),t._v(" "),s("p",[t._v("자바를 꽤 오래 사용했던 터라, 배열을 다룰 때 항상 인덱스를 이용하는데, 파이썬에서는 리스트의 반복형을 이용하므로 인덱스를 잘 쓰지 않는다. 인덱스가 필요할 때 "),s("code",[t._v("enumerate")]),t._v("를 이용하면 인덱스를 구할 수 있다.")]),t._v(" "),s("h3",{attrs:{id:"zip과-unpacking"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#zip과-unpacking"}},[t._v("#")]),t._v(" zip과 unpacking")]),t._v(" "),s("p",[s("code",[t._v("zip")]),t._v("는 인자로 주어진 가장 짧은 리스트의 항목 수 길이만큼의 새로운 리스트를 만들어 주는데, 주어진 항목의 서로 매칭해서 리스트를 만든다. 양쪽 지퍼를 매칭해서 잠그는 것을 연상하면 쉽다.")]),t._v(" "),s("h3",{attrs:{id:"args와-kwargs"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#args와-kwargs"}},[t._v("#")]),t._v(" args와 kwargs")]),t._v(" "),s("p",[t._v("인자를 받을 때, "),s("code",[t._v("*")]),t._v("로 받으면 튜플로, "),s("code",[t._v("**")]),t._v("로 받으면 dict로 매개변수를 받아준다.")])])}),[],!1,null,null,null);a.default=r.exports}}]);